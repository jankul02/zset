apiVersion: dataproxy.jankul02/v1alpha1
kind: ZookeeperSet
metadata:
  name: zookeeperset-lab
  namespace: kafka
spec:
  zookeeper:
    app: zk
    autoscale:
      range:
        min: 3
        max: 5
      target: 3
    maxUnavailable: 1
    updateOnChange:
    #TODO redesign and implement
    - kind: Secret
      name: keystorepasswd-zk-0    
    - kind: Secret
      name: keystore-zk-0
    image: jankul02/kubernetes-zookeeper:0.0.67
    spec:
      env:
        - name: WELCOME_MESSAGE
          value: "The generic Hello World from zookeeper"      
        - name: ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL
          value: DEBUG
        - name: ZOOKEEPER_LOG4J_ROOT_LOGLEVEL
          value: DEBUG
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        - name: ZOOKEEPER_SECURE_CLIENT_PORT
          value: "2182"
        - name: ZOOKEEPER_SSL_QUORUM
          value: "true"
        - name: ZOOKEEPER_SSL_QUORUM_KEYSTORE_LOCATION
          value: /mnt/keystore.jks
        - name: ZOOKEEPER_SSL_QUORUM_TRUSTSTORE_LOCATION
          value: /mnt/truststore.jks
        - name: ZOOKEEPER_SSL_QUORUM_HOSTNAME_VERIFICATION
          value: "false"
        - name: ZOOKEEPER_SSL_HOSTNAME_VERIFICATION
          value: "false"
        - name: ZOOKEEPER_SERVER_CNXN_FACTORY
          value: org.apache.zookeeper.server.NettyServerCnxnFactory
        - name: ZOOKEEPER_SSL_KEYSTORE_LOCATION
          value: /mnt/keystore.jks
        - name: ZOOKEEPER_SSL_KEYSTORE_TYPE
          value: JKS
        - name: ZOOKEEPER_SSL_TRUSTSTORE_LOCATION
          value: /mnt/truststore.jks
        - name: ZOOKEEPER_SSL_TRUSTSTORE_TYPE
          value: JKS
        - name: ZOOKEEPER_CLIENT_PORT_UNIFICATION
          value:  "true"
        - name: ZOOKEEPER_SSL_CLIENT_AUTH
          value:  none
        - name: ZOOKEEPER_AUTH_PROVIDER_X509
          value: org.apache.zookeeper.server.auth.X509AuthenticationProvider
        - name: ZOOKEEPER_AUTH_PROVIDER_SASL
          value: org.apache.zookeeper.server.auth.SASLAuthenticationProvider
    instances:
    - id: "1"
      nodeSelector:
        zkinstanceid: "1"
        updateOnChange:
        - kind: Secret
          name: keystore-zk-1
      spec:
        env: 
          - name: ZOOKEEPER_SSL_QUORUM_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-1
                key: keystorepassword
          - name: ZOOKEEPER_SSL_QUORUM_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-1
                key: keystorepassword
          - name: ZOOKEEPER_SSL_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-1
                key: keystorepassword
          - name: ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-1
                key: keystorepassword
        volumeMounts:
          # name must match the volume name below
          - name: keystore
            mountPath: /mnt
          # The secret data is exposed to Containers in the Pod through a Volume.
        volumes:
          - name: keystore
            secret:
              secretName: keystore-zk-1           
    - id: "0"
      nodeSelector:
        zkinstanceid: "0"
        updateOnChange:
        - kind: Secret
          name: keystore-zk-0
      spec:
        env: 
          - name: ZOOKEEPER_SSL_QUORUM_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-0
                key: keystorepassword
          - name: ZOOKEEPER_SSL_QUORUM_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-0
                key: keystorepassword
          - name: ZOOKEEPER_SSL_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-0
                key: keystorepassword
          - name: ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-0
                key: keystorepassword
        volumeMounts:
          # name must match the volume name below
          - name: keystore
            mountPath: /mnt
          # The secret data is exposed to Containers in the Pod through a Volume.
        volumes:
          - name: keystore
            secret:
              secretName: keystore-zk-0      
    - id: "2"
      nodeSelector:
        zkinstanceid: "2"  
        updateOnChange:
        - kind: Secret
          name: keystore-zk-2
      spec:  
        env: 
          - name: WELCOME_MESSAGE
            value: "HW from zk 2"
          - name: ZOOKEEPER_SSL_QUORUM_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-2
                key: keystorepassword
          - name: ZOOKEEPER_SSL_QUORUM_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-2
                key: keystorepassword
          - name: ZOOKEEPER_SSL_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-2
                key: keystorepassword
          - name: ZOOKEEPER_SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-zk-2
                key: keystorepassword
        volumeMounts:
          # name must match the volume name below
          - name: keystore
            mountPath: /mnt
          # The secret data is exposed to Containers in the Pod through a Volume.
        volumes:
          - name: keystore
            secret:
              secretName: keystore-zk-2                  
  kafka:
    app: kafkaapp
    image: jankul02/kubernetes-kafka:0.0.69
    autoscale:
      range:
        min: 3
        max: 10
      target: 3
    maxUnavailable: 1    
    updateOnChange:
    - kind: Secret
      name: keystore-kafka-0  
    - kind: Secret
      name: keystore-kafka-1
    - kind: Secret
      name: keystore-kafka-2  
    - kind: Secret
      name: keystorepasswd-kafka-0  
    - kind: Secret
      name: keystorepasswd-kafka-1  
    - kind: Secret
      name: keystorepasswd-kafka-2 
    spec:
      env: 
        - name: WELCOME_MESSAGE
          value: "generic WELCOME"
        - name: KAFKA_LISTENERS
          value: "INTERNET://:9092,INTRANET://:9093"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INTERNET:SSL,INTRANET:SSL" 
        - name: KAFKA_SSL_KEYSTORE_LOCATION
          value: "/mnt/keystore.jks"
        - name: KAFKA_SSL_TRUSTSTORE_LOCATION
          value: "/mnt/truststore.jks"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: INTRANET
        - name: KAFKA_LOG4J_ROOT_LOGLEVEL
          value: DEBUG
        - name: KAFKA_TOOLS_LOG4J_LOGLEVEL
          value: DEBUG
    instances:
    - id: "0"
      nodeSelector:
        kafkainstanceid: "0"
      updateOnChange:
      - kind: Secret
        name: keystore-kafka-0
      spec:
        env: 
          - name: WELCOME_MESSAGE
            value: "HW from kafka 0"
          - name: KAFKA_SSL_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-kafka-1
                key: keystorepassword
          - name: KAFKA_SSL_KEY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-kafka-1
                key: keystorepassword     
          - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-kafka-1
                key: truststorepassword                    
          - name: KAFKA_SSL_KEYSTORE_LOCATION
            value: "/mnt/keystore.jks"
          - name: KAFKA_SSL_TRUSTSTORE_LOCATION
            value: "/mnt/truststore.jks"
        volumeMounts:
          # name must match the volume name below
          - name: keystore
            mountPath: /mnt
          # The secret data is exposed to Containers in the Pod through a Volume.
        volumes:
          - name: keystore
            secret:
              secretName: keystore-kafka-0
    - id: "1"
      nodeSelector:
        kafkainstanceid: "1"  
      updateOnChange:
      - kind: Secret
        name: keystore-kafka-1
      spec:  
        env: 
          - name: WELCOME_MESSAGE
            value: "HW from kafka 1"
          - name: KAFKA_SSL_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-kafka-1
                key: keystorepassword
          - name: KAFKA_SSL_KEY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-kafka-1
                key: keystorepassword     
          - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-kafka-1
                key: truststorepassword                                  
        volumeMounts:
          # name must match the volume name below
          - name: keystore
            mountPath: /mnt
          # The secret data is exposed to Containers in the Pod through a Volume.
        volumes:
          - name: keystore
            secret:
              secretName: keystore-kafka-1          
    - id: "2"
      nodeSelector:
        kafkainstanceid: "2"  
      updateOnChange:
      - kind: Secret
        name: certificate-kafka-2
      spec:  
        env: 
          - name: WELCOME_MESSAGE
            value: "HW from kafka 2"
          - name: KAFKA_SSL_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-kafka-2
                key: keystorepassword
          - name: KAFKA_SSL_KEY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-kafka-2
                key: keystorepassword     
          - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keystorepasswd-kafka-2
                key: truststorepassword     
          - name: KAFKA_SSL_KEYSTORE_LOCATION
            value: "/mnt/keystore.jks"
          - name: KAFKA_SSL_TRUSTSTORE_LOCATION
            value: "/mnt/truststore.jks"
                                                                                   
        volumeMounts:
          # name must match the volume name below
          - name: keystore
            mountPath: /mnt
          # The secret data is exposed to Containers in the Pod through a Volume.
        volumes:
          - name: keystore
            secret:
              secretName: keystore-kafka-2


# secureClientPort=2182
# serverCnxnFactory=org.apache.zookeeper.server.NettyServerCnxnFactory
# authProvider.x509=org.apache.zookeeper.server.auth.X509AuthenticationProvider
# ssl.keyStore.location=<path-to-zookeeper-keystore>
# ssl.keyStore.password=<zookeeper-keystore-password>
# ssl.trustStore.location=<path-to-zookeeper-trustore>
# ssl.trustStore.password=<zookeeper-truststore-password>


# # Connect to the ZooKeeper port configured for TLS
# zookeeper.connect=zk1:2182,zk2:2182,zk3:2182
# # Required to use TLS-to-ZooKeeper (default is false)
# zookeeper.ssl.client.enable=true
# # Required to use TLS-to-ZooKeeper
# zookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty
# # Define key/trust stores to use TLS-to-ZooKeeper; ignored unless zookeeper.ssl.client.enable=true
# zookeeper.ssl.keystore.location=<path-to-kafka-keystore>
#   =<kafka-keystore-password>
# zookeeper.ssl.truststore.location=<path-to-kafka-trustore>
# zookeeper.ssl.truststore.password=<kafka-truststore-password>
# # Tells broker to create ACLs on znodes
# zookeeper.set.acl=true