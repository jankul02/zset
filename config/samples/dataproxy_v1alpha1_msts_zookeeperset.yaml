apiVersion: dataproxy.jankul02/v1alpha1
kind: ZookeeperSet
metadata:
  name: zookeeperset-lab
  namespace: default
spec:
  app: zk
  autoscale:
    range:
      min: 3
      max: 5
  maxUnavailable: 1
  updateOnChange:
  - kind: ConfigMap
    name: zk-config
  - kind: Secret
    name: zksecrets0    
  image: jankul02/kubernetes-zookeeper:0.0.33
  instances:
  - id: "0"
    nodeSelector:
      zkinstanceid: "0"
      updateOnChange:
      - kind: Secret
        name: secret-zk-0
    spec:
      env: 
        - name: ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL
          value: DEBUG
        - name: ZOOKEEPER_LOG4J_ROOT_LOGLEVEL
          value: INFO
        - name: WELCOME_MESSAGE
          value: "Hello ajaja 1000"
        - name: ADDITIONAL_PARAM
          value: " 2311225"
        - name: KAFKA_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-secrets-zk-0
              key: keystorepassword
        - name: KAFKA_SSL_KEY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-secrets-zk-0
              key: keypassword             
      volumeMounts:
        # name must match the volume name below
        - name: secret-zk-0
          mountPath: server.keystore
        # The secret data is exposed to Containers in the Pod through a Volume.
      volumes:
        - name: secret-zk-0
          secret:
            secretName: secret-zk-0
  - id: "1"
    nodeSelector:
      zkinstanceid: "1"
      updateOnChange:
      - kind: Secret
        name: secret-zk-1
    spec:
      env: 
        - name: ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL
          value: DEBUG
        - name: ZOOKEEPER_LOG4J_ROOT_LOGLEVEL
          value: INFO
        - name: WELCOME_MESSAGE
          value: "Hello ajaja 1000"
        - name: ADDITIONAL_PARAM
          value: " 2311225"
      volumeMounts:
        # name must match the volume name below
        - name: secret-zk-1
          mountPath: server.keystore
        # The secret data is exposed to Containers in the Pod through a Volume.
      volumes:
        - name: secret-zk-1
          secret:
            secretName: secret-zk-1            
  - id: "2"
    nodeSelector:
      zkinstanceid: "2"  
      updateOnChange:
      - kind: Secret
        name: secret-zk-2
    spec:  
      env: 
        - name: ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL
          value: INFO
        - name: ZOOKEEPER_LOG4J_ROOT_LOGLEVEL
          value: INFO
        - name: WELCOME_MESSAGE
          value: "How are you 2ooo"
        - name: ADDITIONAL_PARAM
          value: " 231100-q3242"
        - name: KAFKA_SSL_KEYSTORE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-secrets-zk-2
              key: keystorepassword
        - name: KAFKA_SSL_KEY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ssl-secrets-zk-2
              key: keypassword             
      volumeMounts:
        # name must match the volume name below
        - name: secret-zk-2
          mountPath: server.keystore
        # The secret data is exposed to Containers in the Pod through a Volume.
      volumes:
        - name: secret-zk-2
          secret:
            secretName: secret-zk-2
  kafka:
    app: kafkaapp
    image: confluentinc/cp-kafka:6.2.0
    updateOnChange:
    - kind: Secret
      name: secret-kafka-0  
    - kind: Secret
      name: secret-kafka-1
    - kind: Secret
      name: secret-kafka-2  
    - kind: Secret
      name: ssl-secrets-kafka-0  
    - kind: Secret
      name: ssl-secrets-kafka-1  
    - kind: Secret
      name: ssl-secrets-kafka-0  
    instances:
    - id: "0"
      nodeSelector:
        kafkainstanceid: "0"
      updateOnChange:
      - kind: Secret
        name: secret-kafka-0
      spec:
        env: 
          - name: WELCOME_MESSAGE
            value: "Hello ajaja 1000"
          - name: ADDITIONAL_PARAM
            value: " 2311225"
          - name: KAFKA_SSL_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-secrets-kafka-0
                key: keystorepassword
          - name: KAFKA_SSL_KEY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-secrets-kafka-0
                key: keypassword
          - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-secrets-kafka-0
                key: truststorepassword                   
          - name: KAFKA_LISTENERS
            value: "INTERNET://:9092,INTRANET://:9093"
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: "INTERNET:SSL,INTRANET:SSL"
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "INTERNET://kafka-0.default.svc.cluster.local:9092,INTRANET://kafka-0.default.svc.cluster.local:9093"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zk-hs.default.svc.cluster.local:2181"      
          - name: KAFKA_SSL_KEYSTORE_LOCATION
            value: "/mnt/keystore.jks"
          - name: KAFKA_SSL_TRUSTSTORE_LOCATION
            value: "/mnt/trustore.jks"

        volumeMounts:
          # name must match the volume name below
          - name: secret-kafka-0
            mountPath: /mnt
          # The secret data is exposed to Containers in the Pod through a Volume.
        volumes:
          - name: secret-kafka-0
            secret:
              secretName: secret-kafka-0
    - id: "1"
      nodeSelector:
        kafkainstanceid: "1"  
      updateOnChange:
      - kind: Secret
        name: secret-kafka-1
      spec:  
        env: 
          - name: WELCOME_MESSAGE
            value: "How are you 2ooo"
          - name: ADDITIONAL_PARAM
            value: " 231100-q3242"
          - name: KAFKA_SSL_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-secrets-kafka-1
                key: keystorepassword
          - name: KAFKA_SSL_KEY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-secrets-kafka-1
                key: keypassword  
          - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-secrets-kafka-1
                key: truststorepassword                             
          - name: KAFKA_LISTENERS
            value: "INTERNET://:9092,INTRANET://:9093"
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: "INTERNET:SSL,INTRANET:SSL"
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "INTERNET://kafka-1.default.svc.cluster.local:9092,INTRANET://kafka-1.default.svc.cluster.local:9093"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zk-hs.default.svc.cluster.local:2181"  
          - name: KAFKA_SSL_KEYSTORE_LOCATION
            value: "/mnt/keystore.jks"
          - name: KAFKA_SSL_TRUSTSTORE_LOCATION
            value: "/mnt/trustore.jks"
      
        volumeMounts:
          # name must match the volume name below
          - name: secret-kafka-1
            mountPath: /mnt
          # The secret data is exposed to Containers in the Pod through a Volume.
        volumes:
          - name: secret-kafka-1
            secret:
              secretName: secret-kafka-1          
    - id: "2"
      nodeSelector:
        kafkainstanceid: "2"  
      updateOnChange:
      - kind: Secret
        name: secret-kafka-2
      spec:  
        env: 
          - name: WELCOME_MESSAGE
            value: "How are you 2ooo"
          - name: ADDITIONAL_PARAM
            value: " 231100-q3242"
          - name: KAFKA_SSL_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-secrets-kafka-2
                key: keystorepassword
          - name: KAFKA_SSL_KEY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-secrets-kafka-2
                key: keypassword     
          - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ssl-secrets-kafka-2
                key: truststorepassword     
          - name: KAFKA_LISTENERS
            value: "INTERNET://:9092,INTRANET://:9093"
          - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
            value: "INTERNET:SSL,INTRANET:SSL"
          - name: KAFKA_ADVERTISED_LISTENERS
            value: "INTERNET://kafka-2.default.svc.cluster.local:9092,INTRANET://kafka-2.default.svc.cluster.local:9093"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: "zk-hs.default.svc.cluster.local:2181"  
          - name: KAFKA_INTER_BROKER_LISTENER_NAME
            value: INTRANET
          - name: KAFKA_SSL_KEYSTORE_LOCATION
            value: "/mnt/keystore.jks"
          - name: KAFKA_SSL_TRUSTSTORE_LOCATION
            value: "/mnt/trustore.jks"
                                                                                   
        volumeMounts:
          # name must match the volume name below
          - name: secret-kafka-2
            mountPath: /mnt
          # The secret data is exposed to Containers in the Pod through a Volume.
        volumes:
          - name: secret-kafka-2
            secret:
              secretName: secret-kafka-2


# secureClientPort=2182
# serverCnxnFactory=org.apache.zookeeper.server.NettyServerCnxnFactory
# authProvider.x509=org.apache.zookeeper.server.auth.X509AuthenticationProvider
# ssl.keyStore.location=<path-to-zookeeper-keystore>
# ssl.keyStore.password=<zookeeper-keystore-password>
# ssl.trustStore.location=<path-to-zookeeper-trustore>
# ssl.trustStore.password=<zookeeper-truststore-password>


# # Connect to the ZooKeeper port configured for TLS
# zookeeper.connect=zk1:2182,zk2:2182,zk3:2182
# # Required to use TLS-to-ZooKeeper (default is false)
# zookeeper.ssl.client.enable=true
# # Required to use TLS-to-ZooKeeper
# zookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty
# # Define key/trust stores to use TLS-to-ZooKeeper; ignored unless zookeeper.ssl.client.enable=true
# zookeeper.ssl.keystore.location=<path-to-kafka-keystore>
#   =<kafka-keystore-password>
# zookeeper.ssl.truststore.location=<path-to-kafka-trustore>
# zookeeper.ssl.truststore.password=<kafka-truststore-password>
# # Tells broker to create ACLs on znodes
# zookeeper.set.acl=true