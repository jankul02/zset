- name: define zk pod presets
  community.kubernetes.k8s:
    definition:
      apiVersion: redhatcop.redhat.io/v1alpha1
      kind: PodPreset
      metadata:
        name: 'zk-{{ item.id }}'
        namespace: '{{namespace}}'
      spec: 
        selector:
          matchLabels:
            app: '{{ zookeeper.app }}'
            podnamerequired: 'zk-{{ item.id }}'
        env: '{{(zookeeper.spec.env | default([]) ) +  (item.spec.env | default([]))  }}'
        volumes: '{{   (zookeeper.spec.volumes | default([])) + (item.spec.volumes | default([]) )  }}'
        volumeMounts: '{{   (zookeeper.spec.volumeMounts | default([]) ) + ( item.spec.volumeMounts | default([]) ) }}'
  loop: "{{ zookeeper.instances }}"
  register: zookeeperPresettingResults

- name: print zookeeperPresettingResults
  debug:
    msg: "zookeeperPresettingResults {{zookeeperPresettingResults}}"

- name: zookeepersetapp hsvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-hs     
        namespace: '{{ namespace }}'
        labels:
          app: '{{ zookeeper.app }}'    
      spec:
        ports:
        - port: 2888
          name: tcp-server
        - port: 3888
          name: tcp-leader-el
        - port: 2181
          name: tcp-client
        - port: 2182
          name: tcp-secclient          
        publishNotReadyAddresses: true           
        clusterIP: None
        selector:
          app: '{{ zookeeper.app }}'   
          
- name: Service zookeepersetapp-csvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-cs
        namespace: '{{ namespace }}'
        labels:
          app: '{{ zookeeper.app }}'    
      spec:
        ports:
        - port: 2181
          name: tcp-client
        - port: 2182
          name: tcp-secclient          
        selector:
          app: '{{ zookeeper.app }}'    

- name: zookeeper.app policy for pod disruption budget 
  community.kubernetes.k8s:
    definition:
      apiVersion: policy/v1
      kind: PodDisruptionBudget
      metadata:
        name: zk-pdb
        namespace: '{{ namespace }}'
      spec:
        selector:
          matchLabels:
            app: '{{ zookeeper.app }}'    
        #TODO: variable for maxUnavailable
        maxUnavailable: 1 

# - name: zookeeper volumemounts
#   set_fact:
#     volumemounts:
#       - name: datadir
#         mountPath: /var/lib/zookeeper
        
- name:  ZookeeperSet depends on
  community.kubernetes.k8s_info:
    kind: '{{item.kind}}'
    name: '{{item.name}}'
    namespace: '{{namespace}}'
  loop: '{{ zookeeper.updateOnChange }}'  
  register: zookeeperupdateonchangeresources

- name: annotate dependent update ZookeeperSet
  set_fact:
      zookeeperannotation: '{{ ( zookeeperannotation | default([]) ) + item.resources }}'
  loop: '{{ zookeeperupdateonchangeresources.results }}'  
  when: item.resources | length > 0

- name: make annotation update ZookeeperSet
  set_fact:
      zookeeperRolloutAnnotation: "{{ zookeeperannotation | hash('sha1') }}" 

- name: Zookeeperset deployment
  community.kubernetes.k8s:
    definition: "{{lookup('template', 'zookeeperset.yaml') }}"
  register: zookeeperStsresult

- meta: end_play
  when: kafka is not defined

- name: Kafka headless service
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: kafka
        namespace: '{{namespace}}'
        labels:
          app: '{{kafka.app}}'
      spec:
        ports:
          - port: 9093
            name: tcp-intra-kafka
          - port: 9092
            name: tcp-inter-kafka
        publishNotReadyAddresses: true                
        clusterIP: None
        selector:
          app: '{{kafka.app}}'

- name: Kafka service
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: kafka-cs
        namespace: '{{namespace}}'
        labels:
          app: '{{kafka.app}}'
      spec:
        ports:
          - port: 9093
            name: tcp-intra-kafka
          - port: 9092
            name: tcp-inter-kafka
        selector:
          app: '{{kafka.app}}'

- name: define kafka pod presets
  community.kubernetes.k8s:
    definition:
      apiVersion: redhatcop.redhat.io/v1alpha1
      kind: PodPreset
      metadata:
        name: 'kafka-{{ item.id }}'
        namespace: '{{namespace}}'
      spec: 
        selector:
          matchLabels:
            app: '{{kafka.app}}'
            podnamerequired: 'kafka-{{ item.id }}'
        env: '{{ (kafka.spec.env | default([]) ) + (item.spec.env | default([]))  }}'        
        volumes: '{{   (kafka.spec.volumes | default([]) ) + (item.spec.volumes | default([]))   }}'
        volumeMounts: '{{  (kafka.spec.volumeMounts | default([]) ) + ( item.spec.volumeMounts | default([]) )  }}'
  loop: "{{ kafka.instances }}"
  register: kafkapresettingresults

- name: print kafkapresettingresults
  debug:
    msg: "kafkapresettingresults {{kafkapresettingresults}}"



- name:  Kafka depends on
  community.kubernetes.k8s_info:
    kind: '{{item.kind}}'
    name: '{{item.name}}'
    namespace: '{{namespace}}'
  loop: '{{ kafka.updateOnChange }}'  
  register: kafkaupdateonchangeresources
  
- name: annotate dependent update Kafka
  set_fact:
      kafkaannotation: '{{ ( kafkaannotation | default([]) ) + item.resources }}'
  loop: '{{ kafkaupdateonchangeresources.results }}'  
  when: item.resources | length > 0

- name: make annotation update kafka
  set_fact:
      kafkaRolloutAnnotation: "{{ kafkaannotation | default([]) | hash('sha1') }}" 


- name: Kafka deployment
  community.kubernetes.k8s:
    definition: "{{lookup('template', 'kafkaset.yaml') }}"
