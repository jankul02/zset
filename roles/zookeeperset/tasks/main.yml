- name: Fetch a list of namespaces
  set_fact:
    projects: "{{ lookup('community.kubernetes.k8s', api_version='v1', kind='Namespace') }}"


- name: getting json structure for a string
  debug: 
    msg: "name={{ item.metadata.name }}"
  loop: "{{ projects }}"

- name: Get confs
  community.kubernetes.k8s_info:
    api_version: v1
    kind: ConfigMap
    label_selectors:
      - app = zkcfg
    namespace: '{{ ansible_operator_meta.namespace }}'
  register: cnfs

- name: Initialize cfgs list 
  set_fact:
    zkcfgs: []

- name: collect the list
  set_fact:
    zkcfgs: "{{ zkcfgs + [ item.metadata.name ] }}"
  loop: "{{ cnfs.resources }}"


- name: create default cnfs if needed
  k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata: 
        name: '{{ item.name }}'
        labels:
          app: zkcfg
        namespace: '{{ ansible_operator_meta.namespace }}'
    state: present
  loop:
    - { name: 'zk-0', zkid: 0 }
    - { name: 'zk-1', zkid: 1 }
    - { name: 'zk-2', zkid: 2 }
    - { name: 'zk-3', zkid: 3 }
    - { name: 'zk-4', zkid: 4 }
  when:  item.name not in zkcfgs 

- name: Service hsvc
  k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-hs
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: zk
      spec:
        ports:
        - port: 2888
          name: server
        - port: 3888
          name: leader-election
        clusterIP: None
        selector:
          app: zk

- name: Service zookeepersetapp-csvc
  k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-cs
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: zk
      spec:
        ports:
        - port: 2181
          name: client
        selector:
          app: zk

- name: policy for pod disruption budget zookeepersetapp
  k8s:
    definition:
      apiVersion: policy/v1
      kind: PodDisruptionBudget
      metadata:
        name: zk-pdb
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          matchLabels:
            app: zk
        maxUnavailable: 1

- name: Zookeeperset deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: zk
        namespace: '{{ ansible_operator_meta.namespace }}'        
      spec:
        selector:
          matchLabels:
            app: zk
        serviceName: zk-hs
        replicas: '{{replicas}}'
        updateStrategy:
          type: RollingUpdate
        podManagementPolicy: OrderedReady
        template:
          metadata:
            labels:
              app: zk
          spec:
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                        - key: "app"
                          operator: In
                          values:
                          - zk
                    topologyKey: "kubernetes.io/hostname"
            containers:
            - name: kubernetes-zookeeper
              imagePullPolicy: Always
              image: "{{ image }}"
              resources:
                requests:
                  memory: "1Gi"
                  cpu: "0.5"
              ports:
              - containerPort: 2181
                name: client
              - containerPort: 2888
                name: server
              - containerPort: 3888
                name: leader-election            
              command:
              - sh
              - -c
              - "start-zookeeper \
                 --servers={{replicas}}"
#              envFrom:
              # - configMapRef:
              #     name: common-config
              readinessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              livenessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              volumeMounts:
              - name: datadir
                mountPath: /var/lib/zookeeper
              - name: zk-0
                mountPath: /mnt/zk-0  
              - name: zk-1
                mountPath: /mnt/zk-1  
              - name: zk-2
                mountPath: /mnt/zk-2  
              - name: zk-3
                mountPath: /mnt/zk-3  
              - name: zk-4
                mountPath: /mnt/zk-4  
            volumes:
            - name: zk-0
              configMap:
                name: zk-0                
            - name: zk-1
              configMap:
                name: zk-1                
            - name: zk-2
              configMap:
                name: zk-2                
            - name: zk-3
              configMap:
                name: zk-3                
            - name: zk-4
              configMap:
                name: zk-4                
            securityContext:
      #        runAsUser: 1000
              fsGroup: 1000
        volumeClaimTemplates:
        - metadata:
            name: datadir
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 10Gi
