

- name: get the configname (uuid) of the comming deployment    
  set_fact:
    configname: "zk-config-{{ data  | default({}) | to_uuid  }}"  


- name: append a stamp to have non empty data   
  set_fact:
    data_to_set: "{{ data  | default({}) | combine({ 'metacfg': 'CONFIGNAME='+configname}) }}"

- name: create cnf
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata: 
        name: zk-global
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ app }}'
          configmap: zk-global
      data: '{{data_to_set}}'  
    state: present


- name: Service hsvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-hs
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ app }}'    
      spec:
        ports:
        - port: 2888
          name: tcp-server
        - port: 3888
          name: tcp-leader-el
        clusterIP: None
        selector:
          app: '{{ app }}'   


- name: Service zookeepersetapp-csvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-cs
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ app }}'    
      spec:
        ports:
        - port: 2181
          name: tcp-client
        selector:
          app: '{{ app }}'    

- name: policy for pod disruption budget 
  community.kubernetes.k8s:
    definition:
      apiVersion: policy/v1
      kind: PodDisruptionBudget
      metadata:
        name: zk-pdb
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          matchLabels:
            app: '{{ app }}'    
        maxUnavailable: 1

- name: volumemounts
  set_fact:
    volumemounts:
      - name: datadir
        mountPath: /var/lib/zookeeper
      - name: zk-global
        mountPath: /mnt/zk-global

- name: volumes
  set_fact:
    volumes:
      - name: zk-global
        configMap:
          name: zk-global       

- name: secret volumes & their mounts
  set_fact:
    volumemounts: "{{ (volumemounts  | default([]) ) + [ { 'name' : item.secretname , 'mountPath' : '/mnt/'+ item.secretname , 'readOnly': true } ] }}"
    volumes: "{{ ( volumes  | default([]) ) + [ { 'name' : item.secretname , 'secret' : { 'secretName' : item.secretname, 'items' : item['items'] }  } ] }}"
  loop: "{{ secrets }}" 
  when: secrets is defined 

- name: Zookeeperset deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: zk
        namespace: '{{ ansible_operator_meta.namespace }}'       
        labels:
          app: '{{ app }}'               
      spec:
        selector:
          matchLabels:
            app: '{{ app }}'    
        serviceName: zk-hs
        replicas: '{{replicas}}'
        updateStrategy:
          type: RollingUpdate
        podManagementPolicy: OrderedReady
        template:
          metadata:
            labels:
              app: '{{ app }}'
            annotations: 
              configname: '{{configname}}' 
          spec:
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                        - key: "app"
                          operator: In
                          values:
                          - '{{ app }}'    
                    topologyKey: "kubernetes.io/hostname"
            containers:
            - name: kubernetes-zookeeper
              imagePullPolicy: Always
              image: '{{ image }}'
              resources:
                requests:
                  memory: "1Gi"
                  cpu: "0.5"
              ports:
              - containerPort: 2181
                name: tcp-client
              - containerPort: 2888
                name: tcp-server
              - containerPort: 3888
                name: tcp-leader-el            
              command:
              - sh
              - -c
              - "/etc/confluent/docker/start-zookeeper \
                 --servers={{replicas}}"
              readinessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "/etc/confluent/docker/zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              livenessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "/etc/confluent/docker/zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              volumeMounts: "{{ volumemounts }}"
            volumes: "{{ volumes }}"
            securityContext:
      #        runAsUser: 1000
              fsGroup: 1000
        volumeClaimTemplates:
        - metadata:
            name: datadir
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 10Gi
