- name: print configuration values    
  debug:
    msg:  '{{ app }} has  autoscale.range.min: {{ autoscale.range.min }}  '

- name: calculate replicas  
  #TODO real calculation upon node metrics and external hints
  set_fact:
    replicas: '{{autoscale.range.min | int}}'

- name: print replicas    
  debug:
    msg:  'replicas {{ replicas }}'    
  



- name: init specs    
  set_fact:
    instancesspeclist:  []  
 
- name: print allspecs   
  debug:
    msg:  'instance {{ item }}  '    
  loop: "{{ instances }}"



# - name: collect allspecs with added preset labels    
#   set_fact:
#      instancesspeclist:  "{{ instancesspeclist + [ item | combine({'spec':(item.spec  | default({}))|combine({ 'matchLabels': ( spec.matchLabels | default([]) ) + [ { 'podnamerequired': 'zk-'+ item.id } ] }  ) }) ] }}"
#   loop: "{{ instances }}"


- name: print allspecs    
  debug:
    msg:  'instancesspec {{ item }}  '    
  loop: "{{ instancesspeclist }}"

- name: print specs
  debug:
    msg:  'spec: {{ item.spec }}'    
  loop: "{{ instances }}"




- name: Search for all preset labelled app
  community.kubernetes.k8s_info:
    kind: PodPreset
    api_version: v1alpha1
    # label_selectors:
    #   - 'app = {{app}}'
  register: podpresetsbefore

- name: print podpresetsbefore
  debug:
    msg:  '{{ podpresetsbefore }}'    

- name: define zk pod presets
  community.kubernetes.k8s:
    definition:
      apiVersion: redhatcop.redhat.io/v1alpha1
      kind: PodPreset
      metadata:
        name: 'zk-{{ item.id }}'
        namespace: '{{namespace}}'
      spec: 
        selector:
          matchLabels:
            app: '{{app}}'
            podnamerequired: 'zk-{{ item.id }}'
        env: '{{ item.spec.env | default([]) }}'
        volumes: '{{ item.spec.volumes | default([]) }}'
        volumeMounts: '{{ item.spec.volumeMounts | default([]) }}'
  loop: "{{ instances }}"
  register: presettingresults

- name: print presettingresult
  debug:
    msg:  '{{ presettingresults }}'    




- name: get the configname (uuid) of the comming deployment    
  set_fact:
    configname: "zk-config-{{ data  | default({}) | to_uuid  }}"  


- name: append a stamp to have non empty data   
  set_fact:
    data_to_set: "{{ data  | default({}) | combine({ 'metacfg': 'CONFIGNAME='+configname}) }}"

- name: create cnf
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata: 
        name: zk-global
        namespace: '{{ namespace }}'
        labels:
          app: '{{ app }}'
          configmap: zk-global
      data: '{{data_to_set}}'  
    state: present


- name: Service hsvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-hs
        namespace: '{{ namespace }}'
        labels:
          app: '{{ app }}'    
      spec:
        ports:
        - port: 2888
          name: tcp-server
        - port: 3888
          name: tcp-leader-el
        - port: 2181
          name: tcp-client
        clusterIP: None
        selector:
          app: '{{ app }}'   



          
- name: Service zookeepersetapp-csvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-cs
        namespace: '{{ namespace }}'
        labels:
          app: '{{ app }}'    
      spec:
        ports:
        - port: 2181
          name: tcp-client
        selector:
          app: '{{ app }}'    

- name: policy for pod disruption budget 
  community.kubernetes.k8s:
    definition:
      apiVersion: policy/v1
      kind: PodDisruptionBudget
      metadata:
        name: zk-pdb
        namespace: '{{ namespace }}'
      spec:
        selector:
          matchLabels:
            app: '{{ app }}'    
        #TODO: variable for maxUnavailable
        maxUnavailable: 1  

- name: volumemounts
  set_fact:
    volumemounts:
      - name: datadir
        mountPath: /var/lib/zookeeper
      - name: zk-global
        mountPath: /mnt/zk-global
      # - name: datalogdir
      #   mountPath: /var/lib/zookeeper/log  

      

- name: volumes
  set_fact:
    volumes:
      - name: zk-global
        configMap:
          name: zk-global       

- name:  ZookeeperSet depends on
  community.kubernetes.k8s_info:
    kind: '{{item.kind}}'
    name: '{{item.name}}'
    namespace: '{{namespace}}'
  loop: '{{ updateOnChange }}'  
  register: updateonchangeresources

- name: print updateonchangeresources
  debug:
    msg:  '{{ updateonchangeresources }}'    

- name: print resources
  debug:
    msg:  'item: {{ item }}'    
  loop: '{{ updateonchangeresources.results }}'  


- name: annotate dependent update ZookeeperSet
  set_fact:
      annotation: '{{ ( annotation | default([]) ) + item.resources }}'
  loop: '{{ updateonchangeresources.results }}'  
  when: item.resources | length > 0

- name: print dependent update ZookeeperSet
  debug:
    msg:  '{{ annotation }}'  

- name: make annotation update ZookeeperSet
  set_fact:
      rolloutAnnotation: "{{ annotation | hash('sha1') }}" 


- name: Zookeeperset deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: zk
        namespace: '{{ namespace }}'       
        labels:
          app: '{{ app }}'
      spec:
        selector:
          matchLabels:
            app: '{{ app }}'
        serviceName: zk-hs
        replicas: 3        
        updateStrategy:
          type: RollingUpdate
        podManagementPolicy: OrderedReady
        template:
          metadata:
            labels:
              app: '{{ app }}'
            annotations: 
              configname: '{{configname}}' 
              rolloutAnnotation: '{{rolloutAnnotation}}'                
          spec:
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                        - key: "app"
                          operator: In
                          values:
                          - '{{ app }}'    
                    topologyKey: "kubernetes.io/hostname"
            containers:
            - name: kubernetes-zookeeper
              imagePullPolicy: Always
              image: '{{ image }}'
              resources:
                requests:
                  memory: "1Gi"
                  cpu: "0.5"
              ports:
              - containerPort: 2181
                name: tcp-client
              - containerPort: 2888
                name: tcp-server
              - containerPort: 3888
                name: tcp-leader-el
              command:
              - sh
              - -c
              - "/etc/confluent/docker/start-zookeeper \
                 --servers={{replicas}}"
              readinessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "/etc/confluent/docker/zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              livenessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "/etc/confluent/docker/zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              volumeMounts: "{{volumemounts}}"
            volumes: "{{ volumes }}"
            securityContext:
      #        runAsUser: 1000
              fsGroup: 1000            
        volumeClaimTemplates:
        - metadata:
            name: datadir
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: "5Gi"
        # - metadata:
        #     name: datalogdir
        #   spec:
        #     accessModes: [ "ReadWriteOnce" ]
        #     resources:
        #       requests:
        #         storage: "5Gi"
  register: stsresult


- name: print stsresult
  debug:
    msg:  '{{ stsresult }}'    


- name: Kafka headless service
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: kafka
        namespace: '{{namespace}}'
        labels:
          app: '{{kafka.app}}'
      spec:
        ports:
          - port: 9093
            name: tcp-intra-kafka
          - port: 9092
            name: tcp-inter-kafka
        clusterIP: None
        selector:
          app: '{{kafka.app}}'

- name: Kafka service
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: kafka-cs
        namespace: '{{namespace}}'
        labels:
          app: '{{kafka.app}}'
      spec:
        ports:
          - port: 9093
            name: tcp-intra-kafka
          - port: 9092
            name: tcp-inter-kafka
        selector:
          app: '{{kafka.app}}'

- name: define kafka pod presets
  community.kubernetes.k8s:
    definition:
      apiVersion: redhatcop.redhat.io/v1alpha1
      kind: PodPreset
      metadata:
        name: 'kafka-{{ item.id }}'
        namespace: '{{namespace}}'
      spec: 
        selector:
          matchLabels:
            app: '{{kafka.app}}'
            podnamerequired: 'kafka-{{ item.id }}'
        env: '{{ item.spec.env | default([]) }}'
        volumes: '{{ item.spec.volumes | default([]) }}'
        volumeMounts: '{{ item.spec.volumeMounts | default([]) }}'
  loop: "{{ kafka.instances }}"
  register: kafkapresettingresults

- name: print kafkapresettingresults
  debug:
    msg:  '{{ kafkapresettingresults }}'    



- name:  Kafka depends on
  community.kubernetes.k8s_info:
    kind: '{{item.kind}}'
    name: '{{item.name}}'
    namespace: '{{namespace}}'
  loop: '{{ kafka.updateOnChange }}'  
  register: kafkaupdateonchangeresources
  when: kafka.updateOnChange | length > 0

- name: print kafkaupdateonchangeresources
  debug:
    msg:  'kafkaupdateonchangeresources {{ kafkaupdateonchangeresources | default([]) }}'    


- name: annotate dependent update Kafka
  set_fact:
      kafkaannotation: '{{ ( kafkaannotation | default([]) ) + item.resources }}'
  loop: '{{ kafkaupdateonchangeresources.results }}'  
  when: item.resources | length > 0

- name: print kafka annotaytion for update kafka
  debug:
    msg:  'kafkaannotation {{ kafkaannotation | default([]) }}'  

- name: make annotation update kafka
  set_fact:
      kafkarolloutAnnotation: "{{ kafkaannotation | default([]) | hash('sha1') }}" 


- name: Kafka deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: kafka
        namespace: '{{namespace}}'
        labels:
          app: '{{kafka.app}}'
      spec:
        selector:
          matchLabels:
            app: '{{kafka.app}}'
        serviceName: kafka
        podManagementPolicy: OrderedReady
        replicas: 3
        updateStrategy:
          type: RollingUpdate
        template:
          metadata:
            labels:
              app: '{{kafka.app}}'
            annotations:
              rolloutAnnotation: '{{kafkarolloutAnnotation}}'  
          spec:
            affinity:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                        - key: "app"
                          operator: In
                          values:
                          - '{{kafka.app}}'
                    topologyKey: "kubernetes.io/hostname"
            containers:
            - name: kafka-broker
              image: '{{kafka.image}}'
              imagePullPolicy: "Always"
              securityContext:
                runAsUser: 0
              ports:
              - containerPort: 9093
                name: tcp-intra-kafka
              - containerPort: 9092
                name: tcp-inter-kafka
              resources:
                {}
              env:
              - name: POD_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.podIP
              - name: HOST_IP
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              - name: POD_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
              - name: POD_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: KAFKA_HEAP_OPTS
                value: -Xms512M -Xmx512M
              - name: KAFKA_LOG_DIRS
                value: "/opt/kafka/data-0/logs"
              - name: KAFKA_LOG4J_ROOT_LOGLEVEL
                value: "DEBUG"
              - name: KAFKA_TOOLS_LOG4J_LOGLEVEL
                value: "DEBUG"
              - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
                value: "3"
              # This is required because the Downward API does not yet support identification of
              # pod numbering in statefulsets. Thus, we are required to specify a command which
              # allows us to extract the pod ID for usage as the Kafka Broker ID.
              # See: https://github.com/kubernetes/kubernetes/issues/31218
              command:
              - sh
              - -exc
              - |
                echo "HOSTNAME: ${HOSTNAME} ${HOSTNAME##*-} "  && \
                export KAFKA_LOG4J_ROOT_LOGLEVEL=${KAFKA_LOG4J_ROOT_LOGLEVEL:-DEBUG} && \
                export KAFKA_TOOLS_LOG4J_LOGLEVEL=${KAFKA_TOOLS_LOG4J_LOGLEVEL:-DEBUG} && \
                export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
                export KAFKA_LISTENERS=${KAFKA_LISTENERS:-"INTERNET://:9092,INTRANET://:9093"} && \
                export KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP:-"INTERNET:SSL,INTRANET:SSL"} && \
                export KAFKA_SSL_KEYSTORE_LOCATION=${KAFKA_SSL_KEYSTORE_LOCATION:-/mnt/keystore.jks} && \
                export KAFKA_SSL_TRUSTSTORE_LOCATION=${KAFKA_SSL_TRUSTSTORE_LOCATION:-/mnt/trustore.jks} && \
                export KAFKA_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS:-"INTERNET://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID}),INTRANET://${POD_NAME}.kafka-hs.${POD_NAMESPACE}:9092)"} && \
                export KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT:-"zk-hs:2181"}  && \
                export KAFKA_INTER_BROKER_LISTENER_NAME=${KAFKA_INTER_BROKER_LISTENER_NAME:-INTRANET} && \
                # export KAFKA_OPTS=-Djavax.net.debug=all  && \
                unset KAFKA_PORT && \
                exec /etc/confluent/docker/run
