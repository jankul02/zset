

- name: get configname   
  set_fact:
    configname: "zk-config-{{ data  | default({}) | to_uuid  }}"  



- name: data is never empty   
  set_fact:
    data_to_set: "{{ data  | default({}) | combine({ 'metacfg': 'CONFIGNAME='+configname}) }}"

- name: show data to set 
  debug:
    msg: "{{ data_to_set }}"    





# - name: create empty cnf if needed
#   community.kubernetes.k8s:
#     definition:
#       apiVersion: v1
#       kind: ConfigMap
#       metadata: 
#         name: "zk-config"
#         namespace: '{{ ansible_operator_meta.namespace }}'
#         labels:
#           app: '{{ app }}'
#           configmap: zk-global 
#     state: present
#   when: configname == "zk-config"

- name: create non empty cnf if needed
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata: 
        name: zk-config
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ app }}'
          configmap: zk-global
      data: '{{data_to_set}}'  
    state: present


- name: Service hsvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-hs
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ app }}'    
      spec:
        ports:
        - port: 2888
          name: server
        - port: 3888
          name: leader-election
        clusterIP: None
        selector:
          app: '{{ app }}'   


- name: Service zookeepersetapp-csvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-cs
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ app }}'    
      spec:
        ports:
        - port: 2181
          name: client
        selector:
          app: '{{ app }}'    

- name: policy for pod disruption budget zookeepersetapp
  community.kubernetes.k8s:
    definition:
      apiVersion: policy/v1
      kind: PodDisruptionBudget
      metadata:
        name: zk-pdb
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          matchLabels:
            app: '{{ app }}'    
        maxUnavailable: 1

- name: Zookeeperset deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: zk
        namespace: '{{ ansible_operator_meta.namespace }}'       
        labels:
          app: '{{ app }}'               
      spec:
        selector:
          matchLabels:
            app: '{{ app }}'    
        serviceName: zk-hs
        replicas: '{{replicas}}'
        updateStrategy:
          type: RollingUpdate
        podManagementPolicy: OrderedReady
        template:
          metadata:
            labels:
              app: '{{ app }}'
            annotations: 
              configname: '{{configname}}' 
          spec:
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                        - key: "app"
                          operator: In
                          values:
                          - '{{ app }}'    
                    topologyKey: "kubernetes.io/hostname"
            containers:
            - name: kubernetes-zookeeper
              imagePullPolicy: Always
              image: "{{ image }}"
              resources:
                requests:
                  memory: "1Gi"
                  cpu: "0.5"
              ports:
              - containerPort: 2181
                name: client
              - containerPort: 2888
                name: server
              - containerPort: 3888
                name: leader-election            
              command:
              - sh
              - -c
              - "start-zookeeper \
                 --servers={{replicas}}"
#              envFrom:
              # - configMapRef:
              #     name: common-config
              readinessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              livenessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              volumeMounts:
              - name: datadir
                mountPath: /var/lib/zookeeper
              - name: zk-global
                mountPath: /mnt/zk-global
              - name: zk-secrets
                mountPath: /mnt/zk-secrets
                readOnly: true                               
              - name: zk-secrets-0
                mountPath: /mnt/zk-secrets-0
                readOnly: true                               
              - name: zk-secrets-2
                mountPath: /mnt/zk-secrets-2
                readOnly: true   
            volumes:
            - name: zk-global
              configMap:
                name: zk-config 
            - name: zk-secrets
              secret:
                secretName: zk-secrets
                items:
                - key: username
                  path: username
                - key: password
                  path: password
            - name: zk-secrets-0
              secret:
                secretName: zk-secrets-0
                items:
                - key: username
                  path: username
                - key: password
                  path: password
            - name: zk-secrets-2
              secret:
                secretName: zk-secrets-2
                items:
                - key: username
                  path: username
                - key: password
                  path: password

            securityContext:
      #        runAsUser: 1000
              fsGroup: 1000
        volumeClaimTemplates:
        - metadata:
            name: datadir
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 10Gi
