# - name: Fetch a list of namespaces
#   set_fact:
#     projects: "{{ lookup('community.kubernetes.k8s', api_version='v1', kind='Namespace') }}"

# - name: getting json structure for a string
#   debug: 
#     msg: "name={{ item.metadata.name }}"
#   loop: "{{ projects }}"

# - name: Get local cnfs 
#   community.kubernetes.k8s_info:
#     api_version: v1
#     kind: ConfigMap  
#     namespace: '{{ ansible_operator_meta.namespace }}'
#     label_selectors:
#       app: {{app}}
#   register: cnfs

# - name: Initialize  cnf list 
#   set_fact:
#     zkcfgs: []


# - name: collect the  cnf names
#   set_fact:
#     zkcfgs: "{{ zkcfgs + [ item.metadata.name ] }}"
#   loop: "{{ cnfs.resources }}"

# - name: create default empty local cnfs if needed
#   k8s:
#     definition:
#       apiVersion: v1
#       kind: ConfigMap
#       metadata: 
#         name: '{{ item.name }}'
#         labels:
#           app: {{app}}
#         namespace: '{{ ansible_operator_meta.namespace }}'
#     state: present
#   loop:
#     - { name: 'zk-0', zkid: 0 }
#     - { name: 'zk-1', zkid: 1 }
#     - { name: 'zk-2', zkid: 2 }
#     - { name: 'zk-3', zkid: 3 }
#     - { name: 'zk-4', zkid: 4 }
#   when:  item.name not in zkcfgs 

- name: Get the config if exists
  community.kubernetes.k8s_info:
    api_version: v1
    kind: ConfigMap  
    namespace: '{{ ansible_operator_meta.namespace }}'
    label_selectors:
      - "app = {{app}}"
      - "configmap= zk-global"
  register: cnfs

- name: print cnfs
  debug:
    msg: "cnfs: {{ cnfs }}"    
  when: ( cnfs is defined ) and  ( cnfs | count > 0 )

- name: show new data 
  debug:
    msg: "{{ data }}"    
  when:   data is defined 

- name: show old data 
  debug:
    msg: "{{ data }}"    
  when:   cfn is defined and cfn.data is defined 


 
- name: get the previous conf map if it exists
  set_fact:
    cnf: "{{ cnfs.resources[0] }}"    
  when: ( cnfs is defined ) and  ( cnfs.resources | count > 0 )


- name: new data is empty (always only zk-config as name)  
  set_fact:
    configname: "zk-config" 
  when: data is undefined

- name: new data is empty (always only zk-config as name)  
  debug:
    msg: "empty new config data: configname: zk-config"    
  when: data is undefined

- name: no changes to the exsiting data  
  set_fact:
    configname: "{{cnf.metadata.name}}" 
  when: cnf is defined and ( (  cnf.data is defined and data is defined  and cnf.data == data ) or  ( cnf.data is undefined and data is undefined  ) )

- name: no changes to the exsiting data  
  debug:
    msg: "no changes to data: configname: {{cnf.metadata.name}}"    
  when: cnf is defined and ( (  cnf.data is defined and data is defined  and cnf.data == data ) or  ( cnf.data is undefined and data is undefined  ) )



- name: new data is non-empty   
  set_fact:
    configname: "zk-config-{{ data | to_uuid  }}"  
  when:   configname is undefined or configname != "zk-config" 

- name: new data is empty   
  set_fact:
    configname: "zk-config-{{ data | to_uuid  }}"  
  when:   configname != "zk-config" 

- name: create empty cnf if needed
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata: 
        name: "zk-config"
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ app }}'
          configmap: zk-global 
    state: present
  when: configname == "zk-config"

- name: create non empty cnf if needed
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata: 
        name: "{{configname }}"
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ app }}'
          configmap: zk-global
      data: '{{data}}'  
    state: present
  when:   configname != "zk-config" 


- name: Service hsvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-hs
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ app }}'    
      spec:
        ports:
        - port: 2888
          name: server
        - port: 3888
          name: leader-election
        clusterIP: None
        selector:
          app: '{{ app }}'   


- name: Service zookeepersetapp-csvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-cs
        namespace: '{{ ansible_operator_meta.namespace }}'
        labels:
          app: '{{ app }}'    
      spec:
        ports:
        - port: 2181
          name: client
        selector:
          app: '{{ app }}'    

- name: policy for pod disruption budget zookeepersetapp
  community.kubernetes.k8s:
    definition:
      apiVersion: policy/v1
      kind: PodDisruptionBudget
      metadata:
        name: zk-pdb
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        selector:
          matchLabels:
            app: '{{ app }}'    
        maxUnavailable: 1

- name: Zookeeperset deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: zk
        namespace: '{{ ansible_operator_meta.namespace }}'       
        labels:
          app: '{{ app }}'               
      spec:
        selector:
          matchLabels:
            app: '{{ app }}'    
        serviceName: zk-hs
        replicas: '{{replicas}}'
        updateStrategy:
          type: RollingUpdate
        podManagementPolicy: OrderedReady
        template:
          metadata:
            labels:
              app: '{{ app }}'   
          spec:
            cfgid: {{ ansible_date_time.epoch }}
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                        - key: "app"
                          operator: In
                          values:
                          - '{{ app }}'    
                    topologyKey: "kubernetes.io/hostname"
            containers:
            - name: kubernetes-zookeeper
              imagePullPolicy: Always
              image: "{{ image }}"
              resources:
                requests:
                  memory: "1Gi"
                  cpu: "0.5"
              ports:
              - containerPort: 2181
                name: client
              - containerPort: 2888
                name: server
              - containerPort: 3888
                name: leader-election            
              command:
              - sh
              - -c
              - "start-zookeeper \
                 --servers={{replicas}}"
#              envFrom:
              # - configMapRef:
              #     name: common-config
              readinessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              livenessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              volumeMounts:
              - name: datadir
                mountPath: /var/lib/zookeeper
              - name: zk-global
                mountPath: /mnt/zk-global                
            volumes:
            - name: zk-global
              configMap:
                name: "{{configname}}"                   
            securityContext:
      #        runAsUser: 1000
              fsGroup: 1000
        volumeClaimTemplates:
        - metadata:
            name: datadir
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 10Gi
