- name: print configuration values    
  debug:
    msg:  '{{ app }} has  autoscale.range.min: {{ autoscale.range.min }}  '

- name: calculate replicas  
  #TODO real calculation upon node metrics and external hints
  set_fact:
    replicas: '{{autoscale.range.min | int}}'

- name: print replicas    
  debug:
    msg:  'replicas {{ replicas }}'    
  



- name: init specs    
  set_fact:
    instancesspeclist:  []  
 
- name: print allspecs   
  debug:
    msg:  'instance {{ item }}  '    
  loop: "{{ instances }}"



# - name: collect allspecs with added preset labels    
#   set_fact:
#      instancesspeclist:  "{{ instancesspeclist + [ item | combine({'spec':(item.spec  | default({}))|combine({ 'matchLabels': ( spec.matchLabels | default([]) ) + [ { 'podnamerequired': 'zk-'+ item.id } ] }  ) }) ] }}"
#   loop: "{{ instances }}"


- name: print allspecs    
  debug:
    msg:  'instancesspec {{ item }}  '    
  loop: "{{ instancesspeclist }}"

- name: print specs
  debug:
    msg:  'spec: {{ item.spec }}'    
  loop: "{{ instances }}"
 

- name: define pod presets
  community.kubernetes.k8s:
    definition:
      apiVersion: redhatcop.redhat.io/v1alpha1
      kind: PodPreset
      metadata:
        name: 'zk-{{ item.id }}'
        namespace: '{{namespace}}'
      spec:
        selector:
          matchLabels:
            app: '{{app}}'
            podnamerequired: 'zk-{{ item.id }}'
        env: '{{ item.spec.env }}'
        volumes: 
          - name: '{{ item.spec.volumes.0.name }}'
            secret: 
              secretName: '{{ item.spec.volumes.0.secret.secret_name }}'
        volumeMounts: 
          - name : '{{ item.spec.volume_mounts.0.name }}'
            mountPath : '{{ item.spec.volume_mounts.0.mount_path }}'
  loop: "{{ instances }}"


# - name: define pod presets
#   community.kubernetes.k8s:
#     definition:
#       apiVersion: redhatcop.redhat.io/v1alpha1
#       kind: PodPreset
#       metadata:
#         name: 'zk-0'
#         namespace: '{{namespace}}'
#       spec:
#         selector:
#           matchLabels:
#             app: '{{app}}'
#             podnamerequired: 'zk-0'
#         env: 
#           - name: ZOOKEEPER_TOOLS_LOG4J_LOGLEVEL
#             value: INFO
#           - name: ZOOKEEPER_LOG4J_ROOT_LOGLEVEL
#             value: INFO
#           - name: WELCOME_MESSAGE
#             value: "Hello hopla hey hey 0000"
#           - name: ADDITIONAL_PARAM
#             value: " 231122"
#         volumeMounts:
#           # name must match the volume name below
#           - name: zksecrets0
#             mountPath: /mnt/zksecrets
#           # The secret data is exposed to Containers in the Pod through a Volume.
#         volumes:
#           - name: zksecrets0
#             secret:
#               secretName: zksecrets0
#  loop: "{{ instances }}"
  


# - name: nginx services
#   community.kubernetes.k8s:
#     state: present
#     definition:
#       apiVersion: v1
#       kind: Service
#       metadata:
#         name: my-nginx{{item}}-svc
#         namespace: default        
#         labels:
#           app: nginx{{item}}
#       spec:
#         type: LoadBalancer
#         ports:
#         - port: 80
#         selector:
#           app: nginx{{item}}    
#   loop: "{{ range(0, 20, 1)|list }}"

# - name: nginx apps
#   community.kubernetes.k8s:
#     state: present
#     definition:
#       apiVersion: apps/v1
#       kind: Deployment
#       metadata:
#         name: my-nginx{{item}}
#         namespace: default            
#         labels:
#           app: nginx{{item}}
#       spec:
#         replicas: 1
#         selector:
#           matchLabels:
#             app: nginx{{item}}
#         template:
#           metadata:
#             labels:
#               app: nginx{{item}}
#           spec:
#             containers:
#             - name: nginx{{item}}
#               image: nginx:1.14.2
#               ports:
#               - containerPort: 80
#   loop: "{{ range(0, 20, 1)|list }}"



- name: get the configname (uuid) of the comming deployment    
  set_fact:
    configname: "zk-config-{{ data  | default({}) | to_uuid  }}"  


- name: append a stamp to have non empty data   
  set_fact:
    data_to_set: "{{ data  | default({}) | combine({ 'metacfg': 'CONFIGNAME='+configname}) }}"

- name: create cnf
  community.kubernetes.k8s:
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata: 
        name: zk-global
        namespace: '{{ namespace }}'
        labels:
          app: '{{ app }}'
          configmap: zk-global
      data: '{{data_to_set}}'  
    state: present


- name: Service hsvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-hs
        namespace: '{{ namespace }}'
        labels:
          app: '{{ app }}'    
      spec:
        ports:
        - port: 2888
          name: tcp-server
        - port: 3888
          name: tcp-leader-el
        clusterIP: None
        selector:
          app: '{{ app }}'   


- name: Service zookeepersetapp-csvc
  community.kubernetes.k8s:
    definition:
      kind: Service
      apiVersion: v1
      metadata:
        name: zk-cs
        namespace: '{{ namespace }}'
        labels:
          app: '{{ app }}'    
      spec:
        ports:
        - port: 2181
          name: client
        selector:
          app: '{{ app }}'    

- name: policy for pod disruption budget 
  community.kubernetes.k8s:
    definition:
      apiVersion: policy/v1
      kind: PodDisruptionBudget
      metadata:
        name: zk-pdb
        namespace: '{{ namespace }}'
      spec:
        selector:
          matchLabels:
            app: '{{ app }}'    
        #TODO: variable for maxUnavailable
        maxUnavailable: 1  

- name: volumemounts
  set_fact:
    volumemounts:
      - name: datadir
        mountPath: /var/lib/zookeeper
      - name: zk-global
        mountPath: /mnt/zk-global

- name: volumes
  set_fact:
    volumes:
      - name: zk-global
        configMap:
          name: zk-global       


- name: Zookeeperset deployment
  community.kubernetes.k8s:
    definition:
      apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: zk
        namespace: '{{ namespace }}'       
        labels:
          app: '{{ app }}'               
      spec:
        selector:
          matchLabels:
            app: '{{ app }}'
        serviceName: zk-hs
        replicas: 3        
        updateStrategy:
          type: RollingUpdate
        podManagementPolicy: OrderedReady
        template:
          metadata:
            labels:
              app: '{{ app }}'
            annotations: 
              configname: '{{configname}}' 
          spec:
            affinity:
              podAntiAffinity:
                requiredDuringSchedulingIgnoredDuringExecution:
                  - labelSelector:
                      matchExpressions:
                        - key: "app"
                          operator: In
                          values:
                          - '{{ app }}'    
                    topologyKey: "kubernetes.io/hostname"
            containers:
            - name: kubernetes-zookeeper
              imagePullPolicy: Always
              image: '{{ image }}'
              resources:
                requests:
                  memory: "1Gi"
                  cpu: "0.5"
              ports:
              - containerPort: 2181
                name: tcp-client
              - containerPort: 2888
                name: tcp-server
              - containerPort: 3888
                name: tcp-leader-el            
              command:
              - sh
              - -c
              - "/etc/confluent/docker/start-zookeeper \
                 --servers={{replicas}}"
              readinessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "/etc/confluent/docker/zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              livenessProbe:
                exec:
                  command:
                  - sh
                  - -c
                  - "/etc/confluent/docker/zookeeper-ready 2181"
                initialDelaySeconds: 10
                timeoutSeconds: 5
              volumeMounts: "{{ volumemounts }}"
            volumes: "{{ volumes }}"
            securityContext:
      #        runAsUser: 1000
              fsGroup: 1000
        volumeClaimTemplates:
        - metadata:
            name: datadir
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 10Gi
